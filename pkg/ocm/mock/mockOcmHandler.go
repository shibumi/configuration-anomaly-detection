// Code generated by MockGen. DO NOT EDIT.
// Source: ocm.go

// Package ocm is a generated GoMock package.
package ocm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockocmHandlerIf is a mock of ocmHandlerIf interface.
type MockocmHandlerIf struct {
	ctrl     *gomock.Controller
	recorder *MockocmHandlerIfMockRecorder
}

// MockocmHandlerIfMockRecorder is the mock recorder for MockocmHandlerIf.
type MockocmHandlerIfMockRecorder struct {
	mock *MockocmHandlerIf
}

// NewMockocmHandlerIf creates a new mock instance.
func NewMockocmHandlerIf(ctrl *gomock.Controller) *MockocmHandlerIf {
	mock := &MockocmHandlerIf{ctrl: ctrl}
	mock.recorder = &MockocmHandlerIfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockocmHandlerIf) EXPECT() *MockocmHandlerIfMockRecorder {
	return m.recorder
}

// OcmGetResourceLive mocks base method.
func (m *MockocmHandlerIf) OcmGetResourceLive(clusterID, resourceKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OcmGetResourceLive", clusterID, resourceKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OcmGetResourceLive indicates an expected call of OcmGetResourceLive.
func (mr *MockocmHandlerIfMockRecorder) OcmGetResourceLive(clusterID, resourceKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OcmGetResourceLive", reflect.TypeOf((*MockocmHandlerIf)(nil).OcmGetResourceLive), clusterID, resourceKey)
}
